// Generated by Dagger (https://dagger.dev).
package com.example.breakingbad.di.main;

import com.example.breakingbad.database.BreakingBadApi;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainModule_ProvidesApiServiceFactory implements Factory<BreakingBadApi> {
  private final MainModule module;

  private final Provider<Retrofit> retrofitProvider;

  public MainModule_ProvidesApiServiceFactory(MainModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public BreakingBadApi get() {
    return providesApiService(module, retrofitProvider.get());
  }

  public static MainModule_ProvidesApiServiceFactory create(MainModule module,
      Provider<Retrofit> retrofitProvider) {
    return new MainModule_ProvidesApiServiceFactory(module, retrofitProvider);
  }

  public static BreakingBadApi providesApiService(MainModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNull(instance.providesApiService(retrofit), "Cannot return null from a non-@Nullable @Provides method");
  }
}
