// Generated by Dagger (https://dagger.dev).
package com.example.breakingbad.di;

import android.app.Application;
import androidx.lifecycle.ViewModel;
import com.example.breakingbad.base.BaseApplication;
import com.example.breakingbad.base.BaseFragment_MembersInjector;
import com.example.breakingbad.database.BreakingBadApi;
import com.example.breakingbad.di.main.MainFragmentBuildersModule_ContributeCharDetailFragment;
import com.example.breakingbad.di.main.MainFragmentBuildersModule_ContributeCharListFragment;
import com.example.breakingbad.di.main.MainModule;
import com.example.breakingbad.di.main.MainModule_ProvidesApiServiceFactory;
import com.example.breakingbad.ui.CharacterDetailFragment;
import com.example.breakingbad.ui.CharacterListFragment;
import com.example.breakingbad.ui.MainActivity;
import com.example.breakingbad.viewmodel.MainViewModel;
import com.example.breakingbad.viewmodel.MainViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<Retrofit> provideRetrofitInstanceProvider;

  private DaggerAppComponent(AppModule appModuleParam, Application application) {

    initialize(appModuleParam, application);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider);
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final Application application) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.provideRetrofitInstanceProvider = DoubleCheck.provider(AppModule_ProvideRetrofitInstanceFactory.create(appModuleParam));
  }

  @Override
  public void inject(BaseApplication arg0) {
    injectBaseApplication(arg0);
  }

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), application);
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent create(
        MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(new MainModule(), arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuildersModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<MainFragmentBuildersModule_ContributeCharListFragment.CharacterListFragmentSubcomponent.Factory> characterListFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuildersModule_ContributeCharDetailFragment.CharacterDetailFragmentSubcomponent.Factory> characterDetailFragmentSubcomponentFactoryProvider;

    private Provider<BreakingBadApi> providesApiServiceProvider;

    private MainActivitySubcomponentImpl(MainModule mainModuleParam, MainActivity arg0) {

      initialize(mainModuleParam, arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(3).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(CharacterListFragment.class, (Provider) characterListFragmentSubcomponentFactoryProvider).put(CharacterDetailFragment.class, (Provider) characterDetailFragmentSubcomponentFactoryProvider).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainModule mainModuleParam, final MainActivity arg0) {
      this.characterListFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_ContributeCharListFragment.CharacterListFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_ContributeCharListFragment.CharacterListFragmentSubcomponent.Factory get(
            ) {
          return new CharacterListFragmentSubcomponentFactory();
        }
      };
      this.characterDetailFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuildersModule_ContributeCharDetailFragment.CharacterDetailFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuildersModule_ContributeCharDetailFragment.CharacterDetailFragmentSubcomponent.Factory get(
            ) {
          return new CharacterDetailFragmentSubcomponentFactory();
        }
      };
      this.providesApiServiceProvider = DoubleCheck.provider(MainModule_ProvidesApiServiceFactory.create(mainModuleParam, DaggerAppComponent.this.provideRetrofitInstanceProvider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      return instance;
    }

    private final class CharacterListFragmentSubcomponentFactory implements MainFragmentBuildersModule_ContributeCharListFragment.CharacterListFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_ContributeCharListFragment.CharacterListFragmentSubcomponent create(
          CharacterListFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CharacterListFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CharacterListFragmentSubcomponentImpl implements MainFragmentBuildersModule_ContributeCharListFragment.CharacterListFragmentSubcomponent {
      private Provider<MainViewModel> mainViewModelProvider;

      private CharacterListFragmentSubcomponentImpl(CharacterListFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(MainViewModel.class, (Provider) mainViewModelProvider);
      }

      private ViewModelProviderFactory viewModelProviderFactory() {
        return new ViewModelProviderFactory(mapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final CharacterListFragment arg0) {
        this.mainViewModelProvider = MainViewModel_Factory.create(MainActivitySubcomponentImpl.this.providesApiServiceProvider);
      }

      @Override
      public void inject(CharacterListFragment arg0) {
        injectCharacterListFragment(arg0);
      }

      private CharacterListFragment injectCharacterListFragment(CharacterListFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseFragment_MembersInjector.injectProviderFactory(instance, viewModelProviderFactory());
        return instance;
      }
    }

    private final class CharacterDetailFragmentSubcomponentFactory implements MainFragmentBuildersModule_ContributeCharDetailFragment.CharacterDetailFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuildersModule_ContributeCharDetailFragment.CharacterDetailFragmentSubcomponent create(
          CharacterDetailFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new CharacterDetailFragmentSubcomponentImpl(arg0);
      }
    }

    private final class CharacterDetailFragmentSubcomponentImpl implements MainFragmentBuildersModule_ContributeCharDetailFragment.CharacterDetailFragmentSubcomponent {
      private Provider<MainViewModel> mainViewModelProvider;

      private CharacterDetailFragmentSubcomponentImpl(CharacterDetailFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> mapOfClassOfAndProviderOfViewModel(
          ) {
        return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(MainViewModel.class, (Provider) mainViewModelProvider);
      }

      private ViewModelProviderFactory viewModelProviderFactory() {
        return new ViewModelProviderFactory(mapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final CharacterDetailFragment arg0) {
        this.mainViewModelProvider = MainViewModel_Factory.create(MainActivitySubcomponentImpl.this.providesApiServiceProvider);
      }

      @Override
      public void inject(CharacterDetailFragment arg0) {
        injectCharacterDetailFragment(arg0);
      }

      private CharacterDetailFragment injectCharacterDetailFragment(
          CharacterDetailFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.dispatchingAndroidInjectorOfObject());
        BaseFragment_MembersInjector.injectProviderFactory(instance, viewModelProviderFactory());
        return instance;
      }
    }
  }
}
